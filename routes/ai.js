// routes/ai.js
import express from 'express';
import { authMiddleware } from '../middleware/auth.js';
import { logger } from '../utils/logger.js';

import enhancedAiService from '../services/enhancedAiService.js';

const router = express.Router();

// Get available FREE models
router.get('/free-models', (req, res) => {
  try {
    const models = [
      {
        name: 'gemini',
        displayName: 'Google Gemini 1.5 Flash',
        description: 'Fast, free, excellent for code generation',
        cost: 'FREE (1M tokens/month)',
        speed: 'Fast',
        status: 'active'
      },
      {
        name: 'groq',
        displayName: 'Groq Llama 3.1 70B',
        description: 'Fastest inference, great for real-time generation',
        cost: 'FREE',
        speed: 'Ultra Fast (300+ tokens/sec)',
        status: 'active'
      }
    ];

    res.json({
      success: true,
      models,
      healthCheck: {
        gemini: !!process.env.GOOGLE_API_KEY,
        groq: !!process.env.GROQ_API_KEY,
        huggingface: !!process.env.HUGGINGFACE_API_TOKEN,
        together: !!process.env.TOGETHER_API_KEY,
        totalAvailable: [
          process.env.GOOGLE_API_KEY,
          process.env.GROQ_API_KEY,
          process.env.HUGGINGFACE_API_TOKEN,
          process.env.TOGETHER_API_KEY
        ].filter(Boolean).length,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    logger.error('Get models error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get models'
    });
  }
});

// Generate React Component (placeholder)
router.post('/generate-component-free', authMiddleware, async (req, res) => {
  try {
    const { 
      description, 
      requirements = '', 
      model = 'gemini', 
      projectId = null 
    } = req.body;

    if (!description) {
      return res.status(400).json({ 
        success: false,
        error: 'Component description is required' 
      });
    }

    // Placeholder response - later we'll integrate with AI service
    const sampleComponent = `import React, { useState } from 'react';

/**
 * ${description} - Generated by AI Code Builder
 */
const GeneratedComponent = () => {
  const [count, setCount] = useState(0);

  return (
    <div className="p-6 max-w-md mx-auto bg-white rounded-xl shadow-lg">
      <h2 className="text-2xl font-bold text-gray-800 mb-4">
        ${description}
      </h2>
      <p className="text-gray-600 mb-4">
        ${requirements || 'This is a sample generated component.'}
      </p>
      <div className="flex items-center space-x-4">
        <button
          onClick={() => setCount(count - 1)}
          className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
        >
          -
        </button>
        <span className="text-xl font-semibold">{count}</span>
        <button
          onClick={() => setCount(count + 1)}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          +
        </button>
      </div>
    </div>
  );
};

export default GeneratedComponent;`;

    res.json({
      success: true,
      component: {
        success: true,
        code: sampleComponent,
        model: model,
        description: description
      },
      availableModels: [
        { name: 'gemini', displayName: 'Google Gemini 1.5 Flash' },
        { name: 'groq', displayName: 'Groq Llama 3.1 70B' }
      ]
    });

  } catch (error) {
    logger.error('Component generation error:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to generate component',
      details: error.message,
      suggestion: 'Try a different model or check your API keys'
    });
  }
});

// Generate Complete React App (placeholder)
router.post('/generate-app-free', authMiddleware, async (req, res) => {
  try {
    const { 
      description, 
      features = [], 
      model = 'gemini',
      platform = 'codesandbox'
    } = req.body;

    if (!description) {
      return res.status(400).json({ 
        success: false,
        error: 'App description is required' 
      });
    }

    // Placeholder app structure
    const sampleApp = {
      files: [
        {
          name: 'App.js',
          path: 'src/App.js',
          content: `import React, { useState } from 'react';
import './App.css';

function App() {
  const [message, setMessage] = useState('Hello from AI Code Builder!');

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center">
      <div className="bg-white p-8 rounded-2xl shadow-xl max-w-md w-full mx-4">
        <h1 className="text-3xl font-bold text-gray-800 mb-6 text-center">
          ${description}
        </h1>
        <div className="space-y-4">
          <p className="text-gray-600 text-center">{message}</p>
          <div className="flex flex-wrap gap-2 justify-center">
            ${features.map(feature => `<span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">${feature}</span>`).join('\n            ')}
          </div>
          <button
            onClick={() => setMessage('AI-Generated React App is Working!')}
            className="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors"
          >
            Test Button
          </button>
        </div>
      </div>
    </div>
  );
}

export default App;`
        },
        {
          name: 'index.js',
          path: 'src/index.js',
          content: `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);`
        },
        {
          name: 'index.css',
          path: 'src/index.css',
          content: `@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}`
        }
      ],
      dependencies: ['react', 'react-dom', 'react-router-dom'],
      description: description
    };

    res.json({
      success: true,
      project: {
        _id: 'sample-project-' + Date.now(),
        name: description.substring(0, 50),
        description: `AI-generated app: ${description}`,
        files: sampleApp.files.map(file => ({
          name: file.name,
          type: file.path.split('.').pop(),
          content: file.content,
          path: file.path
        })),
        buildStatus: 'success'
      },
      app: {
        success: true,
        app: sampleApp,
        model: model
      },
      preview: {
        success: true,
        embedHTML: `<iframe src="https://codesandbox.io/embed/new?codemirror=1" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"></iframe>`
      },
      availableModels: [
        { name: 'gemini', displayName: 'Google Gemini 1.5 Flash' },
        { name: 'groq', displayName: 'Groq Llama 3.1 70B' }
      ],
      usedModel: model
    });

  } catch (error) {
    logger.error('App generation error:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to generate app',
      details: error.message,
      availableModels: [
        { name: 'gemini', displayName: 'Google Gemini 1.5 Flash' },
        { name: 'groq', displayName: 'Groq Llama 3.1 70B' }
      ]
    });
  }
});

router.post('/generate-component-enhanced', authMiddleware, async (req, res) => {
  try {
    const { description, requirements = '', model = 'gemini' } = req.body;

    if (!description) {
      return res.status(400).json({ 
        success: false,
        error: 'Component description is required' 
      });
    }

    const result = await enhancedAiService.generateReactComponent(
      description, 
      requirements, 
      model
    );

    res.json({
      success: true,
      component: result.component,
      enhancement: 'structured-prompts',
      availableModels: ['gemini']
    });

  } catch (error) {
    logger.error('Enhanced component generation error:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to generate enhanced component',
      details: error.message
    });
  }
});

// ADD this new enhanced app endpoint
router.post('/generate-app-enhanced', authMiddleware, async (req, res) => {
  try {
    const { description, features = [], model = 'gemini' } = req.body;

    if (!description) {
      return res.status(400).json({ 
        success: false,
        error: 'App description is required' 
      });
    }

    const result = await enhancedAiService.generateReactApp(
      description, 
      features, 
      model
    );

    res.json({
      success: true,
      app: result.app,
      enhancement: 'structured-prompts',
      availableModels: ['gemini']
    });

  } catch (error) {
    logger.error('Enhanced app generation error:', error);
    res.status(500).json({ 
      success: false,
      error: 'Failed to generate enhanced app',
      details: error.message
    });
  }
});

export default router;
